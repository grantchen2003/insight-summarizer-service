// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.3
// source: file_components_service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileComponentsService_CreateFileComponents_FullMethodName = "/FileComponentsService/CreateFileComponents"
	FileComponentsService_GetFileComponents_FullMethodName    = "/FileComponentsService/GetFileComponents"
)

// FileComponentsServiceClient is the client API for FileComponentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileComponentsServiceClient interface {
	CreateFileComponents(ctx context.Context, in *UserFilePaths, opts ...grpc.CallOption) (*FileComponents, error)
	GetFileComponents(ctx context.Context, in *FileComponentIds, opts ...grpc.CallOption) (*FileComponents, error)
}

type fileComponentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileComponentsServiceClient(cc grpc.ClientConnInterface) FileComponentsServiceClient {
	return &fileComponentsServiceClient{cc}
}

func (c *fileComponentsServiceClient) CreateFileComponents(ctx context.Context, in *UserFilePaths, opts ...grpc.CallOption) (*FileComponents, error) {
	out := new(FileComponents)
	err := c.cc.Invoke(ctx, FileComponentsService_CreateFileComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileComponentsServiceClient) GetFileComponents(ctx context.Context, in *FileComponentIds, opts ...grpc.CallOption) (*FileComponents, error) {
	out := new(FileComponents)
	err := c.cc.Invoke(ctx, FileComponentsService_GetFileComponents_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileComponentsServiceServer is the server API for FileComponentsService service.
// All implementations must embed UnimplementedFileComponentsServiceServer
// for forward compatibility
type FileComponentsServiceServer interface {
	CreateFileComponents(context.Context, *UserFilePaths) (*FileComponents, error)
	GetFileComponents(context.Context, *FileComponentIds) (*FileComponents, error)
	mustEmbedUnimplementedFileComponentsServiceServer()
}

// UnimplementedFileComponentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFileComponentsServiceServer struct {
}

func (UnimplementedFileComponentsServiceServer) CreateFileComponents(context.Context, *UserFilePaths) (*FileComponents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateFileComponents not implemented")
}
func (UnimplementedFileComponentsServiceServer) GetFileComponents(context.Context, *FileComponentIds) (*FileComponents, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileComponents not implemented")
}
func (UnimplementedFileComponentsServiceServer) mustEmbedUnimplementedFileComponentsServiceServer() {}

// UnsafeFileComponentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileComponentsServiceServer will
// result in compilation errors.
type UnsafeFileComponentsServiceServer interface {
	mustEmbedUnimplementedFileComponentsServiceServer()
}

func RegisterFileComponentsServiceServer(s grpc.ServiceRegistrar, srv FileComponentsServiceServer) {
	s.RegisterService(&FileComponentsService_ServiceDesc, srv)
}

func _FileComponentsService_CreateFileComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserFilePaths)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileComponentsServiceServer).CreateFileComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileComponentsService_CreateFileComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileComponentsServiceServer).CreateFileComponents(ctx, req.(*UserFilePaths))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileComponentsService_GetFileComponents_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FileComponentIds)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileComponentsServiceServer).GetFileComponents(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileComponentsService_GetFileComponents_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileComponentsServiceServer).GetFileComponents(ctx, req.(*FileComponentIds))
	}
	return interceptor(ctx, in, info, handler)
}

// FileComponentsService_ServiceDesc is the grpc.ServiceDesc for FileComponentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileComponentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FileComponentsService",
	HandlerType: (*FileComponentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateFileComponents",
			Handler:    _FileComponentsService_CreateFileComponents_Handler,
		},
		{
			MethodName: "GetFileComponents",
			Handler:    _FileComponentsService_GetFileComponents_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "file_components_service.proto",
}
